import { questionsData } from "./loadQuestions.js";
import startQuiz from "./startQuiz.js";
import { updateLeaderboard } from "../database/userUpdate.js";

async function handleQuizAnswer(ctx, answer) {
    const { currentQuestion, currentCategory, correctAnswers = {}, askedQuestions = [], ratingMode, score = 0 } = ctx.session;

    if (!currentQuestion) {
        await ctx.reply("–ö–∞–∂–µ—Ç—Å—è, —è –∑–∞–±—ã–ª –≤–æ–ø—Ä–æ—Å. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.");
        return;
    }

    const correctAnswer = currentQuestion.options[currentQuestion.correctOption];

    if (answer === correctAnswer) {
        await ctx.reply("‚úÖ –í–µ—Ä–Ω–æ!");
        if (ratingMode) {
            ctx.session.score = score + 1;
        } else {
            ctx.session.correctAnswers[currentCategory] = (ctx.session.correctAnswers[currentCategory] || 0) + 1;
        }
    } else {
        await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}`);
        if (ratingMode) {
            const username = ctx.from.username || ctx.from.first_name;
            await updateLeaderboard(username, "rating", ctx.session.score);
            await ctx.reply(`–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Å—á–µ—Ç: ${ctx.session.score}`);
            ctx.session.ratingMode = false;
            ctx.session.score = 0;
            returnMainMenu(ctx); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return;
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–Ω—ã—Ö
    ctx.session.askedQuestions = [...askedQuestions, currentQuestion.index];

    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const questions = ctx.session.questionsData[currentCategory];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
    if (ctx.session.askedQuestions.length >= questions.length) {
        const username = ctx.from.username || ctx.from.first_name;
        const finalScore = ratingMode ? ctx.session.score : ctx.session.correctAnswers[currentCategory];

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
        await updateLeaderboard(username, ratingMode ? "rating" : currentCategory, finalScore);

        await ctx.reply(`üéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –ù–∞–±—Ä–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã: ${finalScore}`);
        ctx.session.askedQuestions = [];
        ctx.session.currentQuestion = null;
        ctx.session.ratingMode = false;
        ctx.session.score = 0;

        returnMainMenu(ctx); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await startQuiz(ctx, currentCategory);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function returnMainMenu(ctx) {
    const startKeyboard = {
        keyboard: [
            [{ text: "üìÑ HTML" }, { text: "üé® CSS" }],
            [{ text: "üü® JavaScript" }, { text: "‚öõÔ∏è React" }],
            [{ text: "üÖ∞Ô∏è Angular" }, { text: "üü¶ TypeScript" }],
            [{ text: "üü©Node.js" }],
            [{ text: "üèÜ –†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π —Ä–µ–∂–∏–º" }],
            [{ text: "üì£ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤" }],
        ],
        resize_keyboard: true,
    };

    ctx.reply("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Ä–µ–∂–∏–º:", {
        reply_markup: startKeyboard,
    });
}

export default handleQuizAnswer;